briefly recaps the project purposes and goals
Monitoring atmospheric aerosols is important due to their effects on peopleâ€™s health and the atmosphere's chemical composition and radiation distribution.
Currently delayed or inaccurate atmospheric reports complicate getting reliable local atmospheric information.
The primary objective of the Aerolyzer project is to create a tool that infers local air quality using regional weather data and image analysis.
The major goals this presents to the project are a quick weather data retrieval, the identification of an image that can be used for color analysis, and the analysis of the colors in an image to estimate the level of aerosols.

describes where you are currently on the project
The team is done with image metadata analysis and the weather data calls.
Logan is currently optimizing the horizon check so the color analysis isn't performed on invalid images.
I've completed the functions needed to locate the image source.
I've written drafts of the first functions needed for color analysis.
The first function creates an array of Hue values that correspond to certain wavelengths of light.
The second function compares a provided color to the array and returns the closest matching wavelength of light.

describes what you have left to do
Color analysis is the last feature we plan on adding before we get into stretch goal territory.
Right now the process of accepting an image is working fairly well, but the accuracy needs to be improved to meet our original goal.
Given the start on the color analysis produces the prominent wavelength of a certain color, the next step in color analysis is determining what that wavelength means in terms of aerosol content.


describes any problems that have impeded your progress, with any solutions you have
Towards the beginning of the term our team had a few internal issues and our client had some problems with how the project was going.
During Fall term we worked quite a bit under the notion that the bulk of our project was going to be the development of a image classifier that identified sunrises and sunsets.
At the beginning of Fall term our client informed us that this is not what she wanted for the project.
We refocused the project, moving our development focus away from in-depth image recognition software to color analysis.
We now have a workable version of the horizon checking function and now we're starting the color analysis like the client wants.

In order to get the Zip Code of an image I used a call to the Google Geocoding API, which returns a json of google maps data.
The formatting of this returned json was exceptionally difficult to work with because the API returns a dictionary containing all the results for a location search and I only needed the data from the first results.
I spoke with our TA about it during a weekly meeting, but I ended up going to Stack Overflow to find the simplest way to navigate the API results.


includes particularly interesting pieces of code (if coding is involved)
def zip_to_coord(zipcode):
    try:
        url = 'https://maps.googleapis.com/maps/api/geocode/json?address='+zipcode+'&key=AIzaSyD0SIrsNBNbE9-hSnfa6gMHALCdLZWJ6uI'
        c = urllib2.urlopen(url)
        results = c.read()
        parsedResults = json.loads(results)
	lat = float(parsedResults['results'][0]['geometry']['location']['lat'])
        lon = float(parsedResults['results'][0]['geometry']['location']['lng'])

    except Exception:
        print "Unable to retrieve data: ", sys.exc_info()[0]
        (lat,lon) = (0.0,0.0)

    finally:
        return (lat,lon)

includes images of your project -- screen shots, photos, whatever is appropriate

