		Monitoring atmospheric aerosols is important due to their effects on people’s health and the atmosphere's chemical composition and radiation distribution.
		Currently delayed or inaccurate atmospheric reports complicate getting reliable local atmospheric information.
		The primary objective of the Aerolyzer project is to create a tool that infers local air quality using regional weather data and image analysis.
		The major goals this presents to the project are a quick weather data retrieval, the identification of an image that can be used for color analysis, and the analysis of the colors in an image to estimate the level of aerosols.
	
	\section{Current State}
			The project is almost entirely complete.
			This term I've been reviewing the tests that I wrote for the functions and also encapsulating each set of captions into their own class.
			This means the functions I've written are now called from instances of their respective classes, like Location.get_coord() or Wavelength.readHazeLayer().
			We've also written a new function, aerolyzeImage(), which effectively calls all of the image analysis functions on a single image.
			This function was importnant to make the library perform it's purpose.
			


	\section{What's left to accomplish}
			Since we've completed the library that produces data on what aerosols are present in an image, the remainder of what we're working on is technically stretch goals.
			The goal that'd improve the project the most for the purpose of showing it at expo is a visual representation of the aerosol data.
			In the first term I looked into potential visualization tools, but these were chosen from the expectation that we'd be able to integrate our library fully into the web application.
			If we can't successfully add our update library to the web app it would still be preferable to have an alternative method of displaying the aerosol analysis results.
			


	\section{Problems}
			Since the beginning of spring term development has been smooth for the most part with one major issue.
			When the Aerolyzer library was updated and pushed to pypy, there was an issue with the library's configuration files.
			Logan and I approached the issue with two different methods.
			I utilized the pyaml library to create a python object that contains all of the information in the configuration file.
			Only two classes need these configuration files, so in those class initializations I added a check for the configuration file's existence.
			If the configuration file doesn't exist a copy of the file is written using the information in the python object.
			This method of creating the configuration file makes sure that the user's installation of Aerolyzer will have the option to change the configuration.
	
	\section{Code}
	This isn't a particulary long code sample, but it shows an example one of the changes I've made this term and the final function for the library aerolyzeImage().
	\begin{lstlisting}
class AeroData(object):
	def __init__(self):
		pass

	def aerolyzeImage(self, pathname):
		imager = retrieve_image_data.RtrvData(pathname)
		return self.readHazeLayer(imager.get_hsv(pathname))
	\end{lstlisting}
	The change to classes means that all the functions had to be updated to call from their own instance or instances of other classes as demonstrated here in readHazeLayer. It utilizes self and creates wave as an instance of the Wavelength class.
	\begin{lstlisting}
def readHazeLayer(self, pixArray):
	numtypes = 12
	cumulative = []
	wave = wavelength.Wavelength()
	for i in pixArray:
			cumulative.append(self.analyzeWavelength(wave.get_wavelength(i,1)))
	aerosolSum = reduce((lambda x, y: [(x[0][0],x[0][1] + y[0][1], x[0][2]),(x[1][0],x[1][1] + y[1][1], x[1][2]),(x[2][0],x[2][1] + y[2][1], x[2][2]),(x[3][0],x[3][1] + y[3][1], x[3][2]),(x[4][0],x[4][1] + y[4][1], x[4][2]),(x[5][0],x[5][1] + y[5][1], x[5][2]),(x[6][0],x[6][1] + y[6][1], x[6][2]),(x[7][0],x[7][1] + y[7][1], x[7][2]),(x[8][0],x[8][1] + y[8][1], x[8][2]),(x[9][0],x[9][1] + y[9][1], x[9][2]),(x[10][0],x[10][1] + y[10][1], x[10][2]),(x[11][0],x[11][1] + y[11][1], x[11][2])]), cumulative)
	aerosolSum = sorted(aerosolSum, key=lambda aerosol: aerosol[1], reverse = True)
	return aerosolSum
	\end{lstlisting}